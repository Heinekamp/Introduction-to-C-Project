/**
 * @file model.hpp
 * @author Max Heinekamp
 * @brief Contains definitions for the MODEL class
 * @version 1.0
 * @date 24-07-2023
 *
 * @copyright Copyright (c) 2023
 */

#ifndef PAIRWISE_MODEL
#define PAIRWISE_MODEL

#include "problem.hpp"

#include <string>
#include <vector>

class PARSER;
class SOLVER;
class PRETTYPRINT;

/**
 * @brief This class stores the model generated by the program
 */
class MODEL {

public:
  MODEL();
  /**
   * @brief Construct a new MODEL object
   *
   * @param p reference to PROBLEM used for solving
   * @param filename filename for .models file, default = models.models
   */
  MODEL(PROBLEM *p, std::string filename = "models.models");
  ~MODEL();

  /**
   * @brief Solves the model and checks if solution is valid
   *
   * @return int status code (see documentation)
   */
  int solve();

  /**
   * @brief Checks the current model
   *
   * @return int status code  (see documentation)
   */
  int check();

  /**
   * @brief outputs the current model to a .models file
   * @note Filename for output file is stored in #m_modelsFileName member of
   * MODEL class and can be set using MODEL::setFile()
   *
   * @return int status code (see documentation)
   */
  int print();

  /**
   * @brief parses an existing solution into the model
   * @note uses filename stored in #m_modelsFileName as source
   *
   * @return int status code (see documentation)
   */
  int parse();

  /**
   * @brief Store the given models in this class (#m_models)
   * @param models two-dimenstional vector contaitning models
   */
  void setModel(std::vector<std::vector<std::string>> models);

  /**
   * @brief Set the #m_modelsFileName
   * @note used for parsing or printing depending on usecase
   * @param filename filename to be set
   */
  void setModelsFile(std::string filename);

  /**
   * @brief Get the #m_models vector
   *
   * @return std::vector<std::vector<std::string>> models
   */
  std::vector<std::vector<std::string>> getModels() const;

  /**
   * @brief Get the #m_modelsFileName name
   *
   * @return std::string filename
   */
  std::string getModelsFile() const;

private:
  /**
   * @brief Reference to instance of PROBLEM class used to create the solution
   */
  PROBLEM *m_problem;

  /**
   * @brief List of models that form solution to the pair problem
   */
  std::vector<std::vector<std::string>> m_models;

  /**
   * @brief stores the filename for the .models file
   * @note used for parsing or printing depending on usecase
   */
  std::string m_modelsFileName;
};

#endif